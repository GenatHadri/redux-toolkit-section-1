{"ast":null,"code":"import { createSlice, configureStore } from \"@reduxjs/toolkit\";\nconst initialState = {\n  counter: 0,\n  showCounter: true\n};\nconst counterSlice = createSlice({\n  name: \"counter\",\n  initialState,\n  reducers: {\n    increment(state) {\n      state.counter++;\n    },\n    decrement(state) {\n      state.counter++;\n    },\n    increase(state, action) {\n      state.counter = state.counter + action.amount;\n    },\n    toggleCounter(state) {\n      state.showCounter = !state.showCounter;\n    }\n  }\n});\nconsole.log(\"c\", counterSlice.actions.increase());\nconst store = configureStore({\n  reducer: counterSlice.reducer // This is the usage when we have one reducer\n  // reducer: { counter: counterSlice.reducer }, // This is the usage when we have multiple reducers, in the background the configureStore will merge all those reducers into one big reducer\n});\n\nexport default store;","map":{"version":3,"names":["createSlice","configureStore","initialState","counter","showCounter","counterSlice","name","reducers","increment","state","decrement","increase","action","amount","toggleCounter","console","log","actions","store","reducer"],"sources":["/Users/genathadri/Udemy/redux-toolkit-with-react-section-1/src/store/index.js"],"sourcesContent":["import { createSlice, configureStore } from \"@reduxjs/toolkit\";\n\nconst initialState = { counter: 0, showCounter: true };\n\nconst counterSlice = createSlice({\n  name: \"counter\",\n  initialState,\n  reducers: {\n    increment(state) {\n      state.counter++;\n    },\n    decrement(state) {\n      state.counter++;\n    },\n    increase(state, action) {\n      state.counter = state.counter + action.amount;\n    },\n    toggleCounter(state) {\n      state.showCounter = !state.showCounter;\n    },\n  },\n});\n\nconsole.log(\"c\", counterSlice.actions.increase());\n\nconst store = configureStore({\n  reducer: counterSlice.reducer, // This is the usage when we have one reducer\n  // reducer: { counter: counterSlice.reducer }, // This is the usage when we have multiple reducers, in the background the configureStore will merge all those reducers into one big reducer\n});\n\nexport default store;\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,cAAc,QAAQ,kBAAkB;AAE9D,MAAMC,YAAY,GAAG;EAAEC,OAAO,EAAE,CAAC;EAAEC,WAAW,EAAE;AAAK,CAAC;AAEtD,MAAMC,YAAY,GAAGL,WAAW,CAAC;EAC/BM,IAAI,EAAE,SAAS;EACfJ,YAAY;EACZK,QAAQ,EAAE;IACRC,SAASA,CAACC,KAAK,EAAE;MACfA,KAAK,CAACN,OAAO,EAAE;IACjB,CAAC;IACDO,SAASA,CAACD,KAAK,EAAE;MACfA,KAAK,CAACN,OAAO,EAAE;IACjB,CAAC;IACDQ,QAAQA,CAACF,KAAK,EAAEG,MAAM,EAAE;MACtBH,KAAK,CAACN,OAAO,GAAGM,KAAK,CAACN,OAAO,GAAGS,MAAM,CAACC,MAAM;IAC/C,CAAC;IACDC,aAAaA,CAACL,KAAK,EAAE;MACnBA,KAAK,CAACL,WAAW,GAAG,CAACK,KAAK,CAACL,WAAW;IACxC;EACF;AACF,CAAC,CAAC;AAEFW,OAAO,CAACC,GAAG,CAAC,GAAG,EAAEX,YAAY,CAACY,OAAO,CAACN,QAAQ,CAAC,CAAC,CAAC;AAEjD,MAAMO,KAAK,GAAGjB,cAAc,CAAC;EAC3BkB,OAAO,EAAEd,YAAY,CAACc,OAAO,CAAE;EAC/B;AACF,CAAC,CAAC;;AAEF,eAAeD,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}